
# Декораторы в Python представляют функцию, которая в качестве параметра получает функцию и в
# качестве результата также возвращает функцию. Декораторы позволяют модифицировать выполняемую
# функцию, значения ее параметров и ее результат без изменения исходного кода этой функции.


# Функция без декоратора ++++++++++++++++++++++++++++++++++++++++++++++++++++

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

print('Вызов функции без декоратора:\n')


def one():                                # исходная функция
    print('вывод функции one')


one()                                     # обычный вызов функции one

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Пример декоратора +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

print('\nВызов функции с декоратором:\n')


def dec(func):
    def wrapper():
        print('+++ инструкции перед вызовом функции +++')
        func()
        print('+++ инструкции после вызова функции  +++\n' + '-' * 40)
    return wrapper


def one():
    print('вывод функции one')


# Примеры вызова декоратора ++++++++++++++++++++++++++++++++++++++++++++++++++


a = dec(one)                                # 1 способ / присвоение переменной
a()                                         # вызов декорированной функции one


one = dec(one)                              # 2 способ / переприсвоение имени функции
one()                                       # вызов декорированной функции one


@dec                                        # 3 способ / синтаксичечкий сахар
def one():                                  # обычная функция
    print('вывод функции one')              # тело функции


one()                                       # вызов декорированной функции one


# Декоратора принимает любые функции +++++++++++++++++++++++++++++++++++++++++

print('\nВызов различных функций с декоратором:\n')


@dec
def start():
    print('ФУНКЦИЯ START')

@dec
def fin():
    print('ФУНКЦИЯ FIN')


start()
fin()